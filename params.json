{
  "name": "Getbd",
  "tagline": "Mini librería Básica para CRUD y Gestión de  Consultas a la Base de Dato, y Manejos de File",
  "body": "# Librería getBd \r\n**Mini librería Básica para CRUD y Gestión de  Consultas a la Base de Dato, y Manejos de File.**\r\n\r\n------------------------------------------------------\r\n + Copyright by **FRANCISCO CAMPOS** \r\n + Versión: BETA\r\n + Licencia: MIT  \r\n + Contactar: <camqui2011@gmail.com>\r\n + https://gitlab.com/franpc/getBd.git\r\n + Requicito: ( php >=5.3.0 , mysql 5.0+ , postgres 9.1.1+)\r\n\r\n\r\nTiene soporte para:\r\n\r\n+ Mysql\r\n+ Mysqli\r\n+ Postgres\r\n+ Files\r\n\r\n\r\n[TOC]\r\n\r\n\r\n# Estructura de la Librería\r\n\r\n```php\r\n    -Src\r\n        File.php\r\n        GetbdM.php\r\n        GetbdMi.php\r\n        GetbdP.php\r\n\r\n    -Config\r\n        Connect\r\n          Mysql.php\r\n          Mysqly.php\r\n          Postgre.php\r\n        Files\r\n          ConfigFile.php\r\n        Base.php\r\n\t\tautocarga.php\r\n\r\n\tstart.php\r\n\r\n    - Documentación.md\r\n\r\n```\r\n\r\n\r\n\r\n# Descripción de la Librería\r\n\r\n------------------------------------------------------\r\n\r\n**Src:** Contiene las clases necesaria para el manejo rápido de las consultas a la base de datos.\r\n\r\n    - GetbdM.php:\r\n\r\n    - name: GetbdM()\r\nContiene las clases y métodos requerido el uso de Mysql.\r\n\r\n     -GetbdMi.php:\r\n\r\n    - name: GetbdMy()\r\nContiene las clases y métodos requerido el uso de Mysqli.\r\n\r\n    - GetbdP.php:\r\n\r\n    - name: GetbdP()\r\nContiene las clases y métodos requerido el uso de Postgres.\r\n\r\n    - File.php:\r\n\r\n    - name: File()\r\nContiene las clases nesesarias para la Subida de Archivos al servidor.\r\n\r\n\r\n\r\n**Config:** Contiene las variables de configuración de la conexión a la base de datos, aquí se configura  las variables de la conexión: root , localhost , password, database, también  los parámetros de los archivos como: tamaño , formato permitidos etc.\r\n\r\n    - Base.php\r\n\r\n# Instalación\r\n\r\nInstalación vía  Composer:\r\n\r\n```php\r\n composer require getBd\r\n```\r\nUso:\r\n\r\n```php\r\nrequire 'vendor/autoload.php'\r\n```\r\n\r\n\r\nInstalación Mediante Descarga:\r\n\r\nhttps://gitlab.com/franpc/getBd.git\r\n\r\n\r\n\r\nUso:\r\n\r\n```php\r\nrequire 'path/getbd/start.php\r\n```\r\n\r\n\r\n\r\n# Funcionamiento\r\n\r\nConfiguración de las variables de conexión.\r\n\r\n\r\n`Config/Base.php`\r\n\r\n Inicializamos los parámetros del Drive a utilizar en el array de configuración.\r\n\r\n**Driver para Mysql**\r\n\r\n```php\r\n    // DRIVER MYSQL\r\n        'mysql' => array(\r\n            'host' => 'host',\r\n            'database' => 'database',\r\n            'user' => 'username',\r\n            'password' => 'password'\r\n\r\n        ),\r\n```\r\n\r\n** Driver para Postgres **\r\n\r\n```php\r\n    // DRIVER POSTGRES\r\n        'postgre' => array(\r\n            'host' => 'host',\r\n            'database' => 'database',\r\n            'user' => 'postusername',\r\n            'password' => 'password'\r\n        ),\r\n```\r\n\r\n**Driver para Mysqli**\r\n\r\n```php\r\n     // DRIVER MYSQLI\r\n        'mysqli' => array(\r\n            'host' => 'host',\r\n            'database' => 'database',\r\n            'user' => 'username',\r\n            'password' =>'password'\r\n        ),\r\n\r\n```\r\n\r\n\r\n# GetBd Mysql\r\n\r\nPara usar getBd con  Mysql\r\n\r\n\r\n```php\r\n<?php\r\nuse Src\\GetbdM;\r\n$obj = new GetbdM();\r\n?>\r\n\r\n```\r\n\r\n# GetBd Mysql Insert\r\n\r\n```php\r\nsave( sql , opcional)\r\n```\r\nEste método recibe dos parámetro, la consulta SQL , y una configuración opcional.\r\n\r\n- **sql:**  consulta sql a insertar, Nota: la variable puede ser llamada de otra forma!\r\n\r\nValores de Retorno:\r\n\r\n- **true:** Registro insertado correctamente.\r\n- **false:** Registro no insertado .\r\n\r\nCon getBd es posible verificar el registro antes de ser insertado, todo en una sola linea de código.\r\n\r\n# GetBd Mysql Insert Verificado\r\n\r\nEsto es posible solo agregando parámetros adicionales al  método save() de la siguiente forma.\r\n\r\n```php\r\nsave( $sql , array('tabla' , 'campos' , 'valor') )\r\n```\r\n  valor adicional es un array con  iten  para la verificacion del registro.\r\n\r\n- **tabla** : Nombre de la tabla donde sera verificado el registro.\r\n- **campo**: Campos referencia para la condicion a cumplir.\r\n- **valor**: Valor de verificación de la condición.\r\n\r\nValores de Retorno:\r\n\r\n- **NULL**: Sí existe un registro que coincida con el array de verificación, el sql  no sera insertado.\r\n- **true**: No se encotro registro similar a la verificación, se realiza el insert de manera correcta.\r\n\r\n**Nota:** Para query más complejos usamos  check()\r\nEjemplo:\r\n```php\r\n check( [ 'tabla' , 'campos' , 'valor'] )\r\n```\r\n```php\r\n check( 'SQL' )\r\n```\r\n\r\nEjemplo: Realizando INSERT con su validación\r\n\r\n```php\r\n<?php \r\n\r\nuse Src\\GetbdM;\r\n\r\n$obj = new GetbdM;\r\n\r\n$sql = \"INSERT INTO tabla (campos) Values (valores)\";\r\n\r\n//verificador del registro\r\n\r\n$con->save($sql, ['tabla' , 'campo' , 'valor']);\r\n\r\n if(!is_null($con))\r\n {\r\n   echo \"Registro Insertado\";\r\n }\r\n else\r\n {\r\n   echo \"Registro No Insertado\";\r\n }\r\n \r\n ```\r\n \r\n ```php\r\n//Sin verificar registro\r\n\r\n$con->save($sql);\r\n\r\n if(!$con)\r\n {\r\n   echo \"Registro Insertado\";\r\n }\r\n else\r\n {\r\n   echo \"Registro No Insertado\";\r\n }\r\n?>\r\n```\r\n\r\n\r\n# GetBd Mysql SELECT\r\n\r\nPara ello tenemos los métodos:\r\n\r\n`find( parametro )` consultas complejas\r\n\r\n+ Recibe un parámetro que es la consulta SQL\r\n+ Retorna **True:** Si hay registro\r\n+ Retorna **False:**  Si no hay registro\r\n\r\n`findAll( tabla )` consultas simples\r\n\r\n+ Recibe un parámetro, el nombre de la tabla de la base de datos\r\n+ Retorna **True:** Si hay registro\r\n+ Retorna **False:**  Si no hay registro\r\n\r\nMostrando los datos:\r\n\r\n`show()`\r\n\r\n+ Retorna un Array Asociativo con los datos\r\n\r\n`showObj()`\r\n\r\n+ Retorna un Objeto con los datos\r\n\r\n`showObjson()`\r\n\r\n+ Retorna un Objeto JSON con los datos Ideal para REST API\r\n\r\n**SELECT a la base de datos**\r\n\r\n```php\r\nfind( sql_query ) show() \r\n```\r\n\r\n```php\r\n <?php\r\n use Src\\GetbdM;\r\n\r\n  $obj = new GetbdM;\r\n  \r\n  $sql = \"SELECT * FROM tabla \";\r\n\r\n  $datos = $obj->find($sql)->show();\r\n\r\n //mostrando los registros\r\n \r\n foreach ($datos as $dato) {\r\n    echo $dato['campo'] . \"<br>\";\r\n }\r\n    \r\n ?>\r\n```\r\n\r\n```php\r\nfindAll( parámetro ) showObj() \r\n```\r\n\r\n```php\r\n <?php\r\n  use Src\\GetbdM;\r\n\r\n $obj = new GetbdM();\r\n  \r\n  $datos = $obj->findAll(\"tabla\")->showObj();\r\n\r\n //mostrando los registros\r\n \r\n foreach ($datos as $dato) {\r\n    echo $dato->campo . \"<br>\";\r\n }\r\n    \r\n ?>\r\n```\r\n\r\n```php\r\n <?php\r\n  use Src\\GetbdM;\r\n\r\n $obj = new GetbdM();\r\n  \r\n  $datos = $obj->findAll(\"tabla\")->showObjson();\r\n\r\n //mostrando los registros en formato JSON\r\n \r\n foreach ($datos as $dato) {\r\n    echo $dato.campo  \"<br>\";\r\n }\r\n    \r\n ?>\r\n```\r\n\r\n\r\n# GetBd SELECT Único\r\n\r\nPara ello tenemos el métodos:\r\n\r\n`findOne( ['tabla' , 'campos', 'valor'] )`\r\n\r\n+ Recibe un arreglo con 3 parámetros \r\n+ Retorna **True:** Sí hay registro\r\n+ Retorna **False:** Sí no hay registro\r\n+ Retorna un registro encontrado\r\n\r\n\r\n```php\r\n <?php\r\n  use Src\\GetbdM;\r\n\r\n$obj = new GetbdM;\r\n\r\n$datos = $obj->findOne(['table' , 'id', 'valor']);\r\n\r\n //mostrando el registro\r\n\r\n  print_r($dato );\r\n ?>\r\n```\r\n\r\n# GetBd Mysql UPDATE\r\n\r\nPara ello tenemos el métodos:\r\n\r\n```php\r\nupdate( sql , 'string' )\r\n```\r\n\r\n+ Recibe dos parámetro que son: la consulta SQL , y la cadena 'update', para evitar error en la consulta. \r\n+ Retorna **True:** Sí se actualizó el registro\r\n+ Retorna **False:** No se actualizó el registro\r\n+ String: Debe ser igual a update\r\n\r\n```php\r\n <?php\r\n use Src\\GetbdM;\r\n\r\n$obj = new GetbdM;\r\n\r\n $sql = \"UPDATE  tabla SET campo = 'valor' where condición\";\r\n\r\n  if ( !$con->update($sql , 'update')) \r\n  {\r\n     echo \"No! se actualizÓ el registro\";\r\n  }\r\n  else\r\n  {   \r\n     echo \"Registro actualizado\";\r\n  }\r\n\r\n ?>\r\n```\r\n\r\n\r\n# GetBd Mysql DELETE\r\n\r\nPara ello tenemos el métodos:\r\n\r\n```php\r\nremove(sql , 'string' )\r\n```\r\n\r\n+ Recibe dos parámetro que son : la consulta SQL , y la cadena 'delete', para evitar error en la consulta. \r\n+ Retorna **True:** Sí se elimino el registro.\r\n+ Retorna **False:** No se elimino el registro.\r\n+ String: Debe ser igual a delete.\r\n\r\n```php\r\n <?php\r\n use Src\\GetbdM;\r\n\r\n $obj = new GetbdM;\r\n  \r\n  $sql = \"DELETE FROM tabla WHERE condición\";\r\n\r\n  if($obj->remove($sql , 'delete'))\r\n  {\r\n  \techo \"Registro eliminado\";\r\n  }\r\n  else\r\n  {\r\n    echo \"No! se elimino el registros\";\r\n  }\r\n\r\n ?>\r\n```\r\n\r\n# GetBd  SQL injection\r\n\r\nUsamos el método `Valid()` recibe la variable a verificar\r\n\r\n**Retorna la consulta segura**\r\n\r\n```php\r\nGetbdM::Valid( $_POST['campos'])\r\n```\r\n\r\n```php\r\n\r\n <?php\r\n \r\n  use Src\\GetbdM;\r\n\r\n  $var = GetbdM::Valid( $_POST['campos']);\r\n  \r\n  $sql = \"SELECT * FROM  tabla WHERE campo = ( $var )\";\r\n\r\n  $con->save( $sql );\r\n\r\n// todas las demas opciones \r\n\r\n ?>\r\n```\r\n\r\n# GetBd Postgres y Mysqli\r\n\r\nEl uso de getBd con Postgres o Mysqli es igual al funcionamiento con Mysql tenemos los mismo métodos. Solo cambiar  **Instancia de la class.**\r\n\r\n**Para usar getBd con  Mysqli:**\r\n\r\n```php\r\n<?php\r\nuse Src\\GetbdMi;\r\n$obj = new GetbdMi();\r\n?>\r\n\r\n```\r\n** Para usar getBd con  Postgres: **\r\n\r\n```php\r\n<?php\r\nuse Src\\GetbdP;\r\n$obj = new GetbdP();\r\n?>\r\n\r\n```\r\n\r\n\r\n**Tenemos los mismo métodos:**\r\n\r\n`save( parámetro )`\r\n\r\n`check( array )`\r\n\r\n`find( parámetro )`\r\n\r\n`findAll( parámetro )`\r\n\r\n`findOne( array )`\r\n\r\n`show()`\r\n\r\n`showObj()`\r\n\r\n`showObjson()`\r\n\r\n`upadate( parámetro , 'string' )`\r\n\r\n`remove( parámetro , 'string' )` \r\n\r\n`Valid( parámetro )`\r\n\r\n**Nota:**\r\n >Puede ver los ejemplos de los métodos arriba.\r\n\r\n\r\n# GetBd Files\r\n\r\nSubir Archivos o files al servidor con getBd es muy fácil.\r\nPara ello tenemos la clase ` File()` que contiene los métodos:\r\n\r\nLa clase ` File()` se puede configurar siertos parámetros para ello nos ubicamos en la  siguiente ruta:\r\n\r\n*Config/Base.php*\r\n\r\n// CONFIGURACIÓN DE LOS FILES O ARCHIVOS DE GETBD\r\n```php\r\n\r\n// EXTENCION DEL FILE PERMITIDO\r\n\r\n        'exten' => array(\r\n\r\n            'jpg' => 'image/jpeg',\r\n            'png' => 'image/png',\r\n            'word' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n            'pdf'  => 'application/pdf'\r\n\r\n        ),\r\n\r\n```\r\n\r\n```php\r\n\t\t// TAMAÑO  DEL FILE PERMITIDO\r\n\r\n        'sizes' => array( \r\n\r\n            's' => 4096000 , //500kb\r\n            'm' =>  819200 , //800 Kb\r\n            'l' => 1048576 , //1024 Kb\r\n            'xl' => 6291456, //6144 Kb\r\n\r\n        ),\r\n\r\n```\r\n**Nota:**\r\n >Puede agregar más valores al array de configuración del FILE en su campo correspondiente.\r\n\r\n**Subir FILE Usando el Método upFile:**\r\n\r\n```php\r\nupFile( file , directorio)\r\n```\r\n\r\n* Recibe un primer parámetro. file a subir.\r\n* Recibe un segundo parámetro el nombre de la carpeta donde se guarda el archivo.\r\n* Retorna **Array:** con 2 valores el primero true , el sugundo la ruta final del archivo guardado.\r\n* Retorna **False:** Sí no se guardo el archivo.\r\n\r\n>Array retornado:\r\n\r\n```php\r\n array respuesta = [ 'valid' => true , 'ruta'=> 'ruta del archivo' ];\r\n```\r\n\r\n**Ejemplo de uso:**\r\n\r\n*index.html*\r\n\r\n```php\r\n<!DOCTYPE html>\r\n\r\n<html>\r\n    <head>\r\n    </head>\r\n    <body>\r\n\r\n        <form action=\"file.php\" method=\"post\" enctype=\"multipart/form-data\">\r\n         <input type=\"file\" name=\"archivo\" ></input><br>\r\n         <input type=\"submit\" value=\"Subir archivo\"></input>\r\n        </form>\r\n\r\n    </body>\r\n\r\n</html>\r\n```\r\n\r\n*demo.php*\r\n\r\n```php\r\n\r\n <?php\r\n\r\nuse Src\\File;\r\n\r\n$file = $_FILES['archivo'];//reciben el archivo\r\n\r\n$archivo = new File; //instancia de la clase\r\n\r\n//usamos el método upFile(nombre del archivo , nombre de la carpeta)\r\n\r\n$var = $archivo->upFile( $file , \"nombre de la carpeta\" );\r\n\r\nif($var[0] == true){\r\n    echo \"Archivo subido\";\r\n\r\n    //ejemplo mostrando el archivo subido\r\n    echo\" <img src='$var[1]' /> \";\r\n\r\n}else{\r\n    echo \"Error al subir archivo\";\r\n}\r\n\r\n?>\r\n```\r\n\r\n**getBd con múltiples archivos:**\r\n\r\nPara ello tenemos la clase ` File()` que contiene los métodos:\r\n\r\n```php\r\nupFiles(files, directorio)\r\n```\r\n* Recibe un primer parámetro. file a subir.\r\n* Recibe un segundo parámetro el nombre de la carpeta donde se guarda el archivo.\r\n* Retorna **Array:** con 2 valores el primero true , el sugundo la ruta final del archivo guardado.\r\n* Retorna **Array:** con error  Si no se guardo el archivo.\r\n\r\n```php\r\narray respuesta = {\r\n  [0] => 'true',\r\n  [0] => 'ruta del archivo guardado1'\r\n  [1] => 'true',\r\n  [1] => 'ruta del archivo guardado2'\r\n}\r\n\r\n```\r\n\r\nEjemplo de uso:\r\n\r\n**index.html**\r\n\r\n```php\r\n<!DOCTYPE html>\r\n\r\n<html>\r\n    <head>\r\n    </head>\r\n    <body>\r\n\r\n        <form action=\"file.php\" method=\"post\" enctype=\"multipart/form-data\">\r\n         <input type=\"file\" name=\"archivo[]\" multiple=\"multiple\" ></input><br>\r\n         <input type=\"submit\" value=\"Subir archivo\"></input>\r\n        </form>\r\n\r\n    </body>\r\n\r\n</html>\r\n```\r\n\r\n\r\n**demo.php**\r\n\r\n```php\r\n <?php \r\n\r\nuse Src\\File;\r\n\r\n\r\n$file = $_FILES['archivo'];//reciben el archivo\r\n\r\n$archivo = new File; //instancia de la clase\r\n\r\n//usamos el método upFiles(nombre del archivo , nombre de la carpeta)\r\n//para la subida de varios archivos al servidor.\r\n\r\n$var = $archivo->upFiles($file , \"carpeta a guardar\" );\r\n\r\necho \"<pre>\";\r\n\r\n print_r($var);//mostrando el resultado de la subida.\r\n\r\necho \"</pre>\";\r\n\r\n?>\r\n```\r\n** GetBd Bajar archivo:**\r\n\r\n```php\r\ndowFile( ruta_file )\r\n```\r\n\r\nEjemplo: Bajando un file\r\n\r\n```php\r\n <?php \r\n\r\nuse Src\\File;\r\n\r\n$archivo = new File; //instancia de la clase\r\n\r\n$archivo->dowFile( \" ruta fina del file \" );\r\n\r\necho \"Archivo Bajado...\";\r\n\r\n?>\r\n```\r\n\r\n**Comprimir un archivo a formato Zip:**\r\n\r\n```php\r\nzipFile( \"ruta final del file\" )\r\n```\r\nEste método Retorna la ruta Final del Archivo .zip.\r\n\r\n** Comprimir un archivo a formato Zip y Bajarlo Al mismo tiempo:**\r\n\r\n```php\r\ndowFile( \"ruta final del file\"  , true )\r\n```\r\n\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}